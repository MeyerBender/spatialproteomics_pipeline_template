configfile: "config.yaml"

tma_image_path = config["paths"]["tma_image_path"]   # where the big TMA image is stored
marker_path = config["paths"]["marker_path"]   # where the marker list is stored
tma_annotation_path = config["paths"]["tma_annotation_path"]   # where the annotations from QuPath are stored
yaml_marker_path = config["paths"]["yaml_marker_path"]   # where the match between markers and cell types are stored for astir
result_path = config["paths"]["result_path"]   # where all intermediate files and results will be stored


# === DEFINE SAMPLE NAMES ===
# we need to define the sample names to tell snakemake which samples to process
# these can simply be read from the TMA annotations which we previously created with QuPath
import pandas as pd
annotation_df = pd.read_csv(tma_annotation_path, sep="\t")
sample_names = annotation_df["Name"].unique().tolist()

rule all:
    input:
        expand(result_path + "/{sample}/05_umap_markers.png", sample=sample_names)

rule crop_tma:
    input:
        tma_image_path = tma_image_path,
        tma_annotation_path = tma_annotation_path,
        parameter_config_path = "configs/cropping_config.yaml",
        cropped_image_path = result_path
    output:
        overview_plot = result_path + "/cropping/overview.png",
        individual_cores_plot = result_path + "/cropping/individual_cores.png",
        images = expand(result_path + "/{sample}/01_image.tiff", sample=sample_names)
    conda: 
        "envs/spatialproteomics_env.yaml"
    script:
        "scripts/01_crop_tma.py"

rule cellpose:
    input:
        marker_path = marker_path,
        image_path = result_path + "/{sample}/01_image.tiff",
        crop_done = result_path + "/cropping/individual_cores.png"  # this indicates that the cropping has finished
    output:
        mask_path = result_path + "/{sample}/02_cellpose_unprocessed.tiff",
        plot_path = result_path + "/{sample}/02_cellpose_unprocessed_overlay.png"
    conda: 
        "envs/spatialproteomics_env.yaml"
    script:
        "scripts/02_cellpose.py"
        
rule process_segmentation:
    input:
        marker_path = marker_path,
        image_path = result_path + "/{sample}/01_image.tiff",
        mask_path = result_path + "/{sample}/02_cellpose_unprocessed.tiff",
        parameter_config_path = "configs/segmentation_processing_config.yaml"
    output:
        mask_path = result_path + "/{sample}/03_cellpose_processed.tiff",
        plot_path = result_path + "/{sample}/03_cellpose_unprocessed_overlay.png"
    conda: 
        "envs/spatialproteomics_env.yaml"
    script:
        "scripts/03_process_segmentation.py"
        
rule predict_celltypes:
    input:
        marker_path = marker_path,
        yaml_marker_path = yaml_marker_path,
        image_path = result_path + "/{sample}/01_image.tiff",
        mask_path = result_path + "/{sample}/03_cellpose_processed.tiff",
    output:
        zarr_path = directory(result_path + "/{sample}/04_dataset.zarr")
    conda: 
        "envs/spatialproteomics_env.yaml"
    script:
        "scripts/04_predict_celltypes.py"

rule plot:
    input:
        yaml_marker_path = yaml_marker_path,
        zarr_path = result_path + "/{sample}/04_dataset.zarr"
    output:
        plot_path_1 = result_path + "/{sample}/05_markers_and_cts.png",
        plot_path_2 = result_path + "/{sample}/05_heatmap.png",
        plot_path_3 = result_path + "/{sample}/05_umap_cts.png",
        plot_path_4 = result_path + "/{sample}/05_umap_markers.png",
    conda: 
        "envs/spatialproteomics_env.yaml"
    script:
        "scripts/05_plot.py"